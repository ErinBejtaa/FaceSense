{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\facerecognitionbrain\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport { useCallback } from \"react\";\nimport Particles from \"react-particles\";\nimport 'tachyons';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAT = '1f99a3573f0143219eee1f52aed0a5dd';\nconst USER_ID = 'erinbejta';\nconst APP_ID = 'my-first-application-t9kdyj';\nconst MODEL_ID = 'face-detection';\nconst MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\nclass App extends Component {\n  constructor() {\n    super();\n    this.calculateFaceLocation = data => {\n      try {\n        const dataparse = JSON.stringify(data);\n        const clarifaiFace = dataparse.outputs[0].data.regions[0].region_info.bounding_box;\n\n        //const clarifaiFace = data.outputs.regions.region_info.bounding_box;\n        const image = document.getElementById('inputimage');\n        const width = Number(image.width);\n        const height = Number(image.height);\n        console.log(dataparse);\n        /*return{\r\n         leftCol: clarifaiFace.left_col * width,\r\n         topRow: clarifaiFace.top_row * height,\r\n         rightCol: width - (clarifaiFace.right_col * width),\r\n         bottomRow: height - (clarifaiFace.bottom_row * height),\r\n        }*/\n\n        console.log(width, height);\n      } catch (error) {\n        console.log(\"error\", error);\n      }\n      //console.log(dataparse);\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      const raw = JSON.stringify({\n        \"user_app_id\": {\n          \"user_id\": USER_ID,\n          \"app_id\": APP_ID\n        },\n        \"inputs\": [{\n          \"data\": {\n            \"image\": {\n              \"url\": this.state.input\n            }\n          }\n        }]\n      });\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': 'Key ' + PAT\n        },\n        body: raw\n      };\n\n      // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n      // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n      // this will default to the latest version_id\n\n      fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions).then(response => response.json()).then(result => this.calculateFaceLocation(result)).catch(error => console.log('error', error));\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {}\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        imageUrl: this.state.input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","Logo","ImageLinkForm","Rank","useCallback","Particles","Clarifai","FaceRecognition","jsxDEV","_jsxDEV","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","App","constructor","calculateFaceLocation","data","dataparse","JSON","stringify","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","console","log","error","onInputChange","event","setState","input","target","value","onButtonSubmit","imageUrl","state","raw","requestOptions","method","headers","body","fetch","then","response","json","result","catch","box","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Lenovo/Desktop/facerecognitionbrain/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport Logo from './components/Logo/Logo';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport Rank from './components/Rank/Rank';\r\nimport { useCallback } from \"react\";\r\nimport Particles from \"react-particles\";\r\nimport 'tachyons';\r\nimport Clarifai from 'clarifai';\r\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\r\n\r\n\r\nconst PAT = '1f99a3573f0143219eee1f52aed0a5dd';\r\nconst USER_ID = 'erinbejta';       \r\nconst APP_ID = 'my-first-application-t9kdyj';\r\nconst MODEL_ID = 'face-detection';\r\nconst MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \r\n\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      input: '',\r\n      imageUrl: '',\r\n      box: {},\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  calculateFaceLocation = (data) => {\r\n   try{ \r\n    const dataparse = JSON.stringify(data);\r\n    const clarifaiFace = dataparse.outputs[0].data.regions[0].region_info.bounding_box;\r\n\r\n  //const clarifaiFace = data.outputs.regions.region_info.bounding_box;\r\n  const image = document.getElementById('inputimage');\r\n  const width = Number(image.width);\r\n  const height = Number(image.height);\r\n  console.log(dataparse);\r\n  /*return{\r\n   leftCol: clarifaiFace.left_col * width,\r\n   topRow: clarifaiFace.top_row * height,\r\n   rightCol: width - (clarifaiFace.right_col * width),\r\n   bottomRow: height - (clarifaiFace.bottom_row * height),\r\n  }*/\r\n\r\n  console.log(width,height);\r\n    \r\n  }catch(error){\r\n    console.log(\"error\", error);\r\n  }\r\n    //console.log(dataparse);\r\n}\r\n\r\n\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({input: event.target.value});\r\n\r\n  }\r\n\r\n\r\n  onButtonSubmit = () => {\r\n    this.setState({imageUrl: this.state.input})\r\n     const raw = JSON.stringify({\r\n        \"user_app_id\": {\r\n            \"user_id\": USER_ID,\r\n            \"app_id\": APP_ID\r\n        },\r\n        \"inputs\": [\r\n            {\r\n                \"data\": {\r\n                    \"image\": {\r\n                        \"url\": this.state.input\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    });\r\n\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Authorization': 'Key ' + PAT\r\n        },\r\n        body: raw\r\n    };\r\n\r\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\r\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\r\n    // this will default to the latest version_id\r\n\r\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\r\n        .then(response => response.json())\r\n        .then(result => this.calculateFaceLocation(result))\r\n        .catch(error => console.log('error', error));\r\n  }\r\n\r\n  render(){\r\n\r\n return (\r\n    <div className=\"App\">\r\n     <Navigation />\r\n     <Logo />\r\n     <Rank />\r\n     <ImageLinkForm \r\n     onInputChange={this.onInputChange}\r\n     onButtonSubmit={this.onButtonSubmit}\r\n      />\r\n    <FaceRecognition imageUrl={this.state.input} /> \r\n    </div>\r\n\r\n  );\r\n\r\n}\r\n}\r\n \r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,IAAI,MAAM,wBAAwB;AACzC,SAASC,WAAW,QAAQ,OAAO;AACnC,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAO,UAAU;AACjB,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,eAAe,MAAM,8CAA8C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG3E,MAAMC,GAAG,GAAG,kCAAkC;AAC9C,MAAMC,OAAO,GAAG,WAAW;AAC3B,MAAMC,MAAM,GAAG,6BAA6B;AAC5C,MAAMC,QAAQ,GAAG,gBAAgB;AACjC,MAAMC,gBAAgB,GAAG,kCAAkC;AAG3D,MAAMC,GAAG,SAAShB,SAAS;EACzBiB,WAAWA,CAAA,EAAE;IACX,KAAK,CAAC,CAAC;IAAC,KAUVC,qBAAqB,GAAIC,IAAI,IAAK;MACjC,IAAG;QACF,MAAMC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;QACtC,MAAMI,YAAY,GAAGH,SAAS,CAACI,OAAO,CAAC,CAAC,CAAC,CAACL,IAAI,CAACM,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW,CAACC,YAAY;;QAEpF;QACA,MAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;QACnD,MAAMC,KAAK,GAAGC,MAAM,CAACJ,KAAK,CAACG,KAAK,CAAC;QACjC,MAAME,MAAM,GAAGD,MAAM,CAACJ,KAAK,CAACK,MAAM,CAAC;QACnCC,OAAO,CAACC,GAAG,CAACf,SAAS,CAAC;QACtB;AACF;AACA;AACA;AACA;AACA;;QAEEc,OAAO,CAACC,GAAG,CAACJ,KAAK,EAACE,MAAM,CAAC;MAEzB,CAAC,QAAMG,KAAK,EAAC;QACXF,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEC,KAAK,CAAC;MAC7B;MACE;IACJ,CAAC;IAAA,KAICC,aAAa,GAAIC,KAAK,IAAK;MACzB,IAAI,CAACC,QAAQ,CAAC;QAACC,KAAK,EAAEF,KAAK,CAACG,MAAM,CAACC;MAAK,CAAC,CAAC;IAE5C,CAAC;IAAA,KAGDC,cAAc,GAAG,MAAM;MACrB,IAAI,CAACJ,QAAQ,CAAC;QAACK,QAAQ,EAAE,IAAI,CAACC,KAAK,CAACL;MAAK,CAAC,CAAC;MAC1C,MAAMM,GAAG,GAAGzB,IAAI,CAACC,SAAS,CAAC;QACxB,aAAa,EAAE;UACX,SAAS,EAAEV,OAAO;UAClB,QAAQ,EAAEC;QACd,CAAC;QACD,QAAQ,EAAE,CACN;UACI,MAAM,EAAE;YACJ,OAAO,EAAE;cACL,KAAK,EAAE,IAAI,CAACgC,KAAK,CAACL;YACtB;UACJ;QACJ,CAAC;MAET,CAAC,CAAC;MAGF,MAAMO,cAAc,GAAG;QACnBC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,QAAQ,EAAE,kBAAkB;UAC5B,eAAe,EAAE,MAAM,GAAGtC;QAC9B,CAAC;QACDuC,IAAI,EAAEJ;MACV,CAAC;;MAED;MACA;MACA;;MAEAK,KAAK,CAAC,qCAAqC,GAAGrC,QAAQ,GAAG,YAAY,GAAGC,gBAAgB,GAAG,UAAU,EAAEgC,cAAc,CAAC,CACjHK,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAI,IAAI,CAACrC,qBAAqB,CAACqC,MAAM,CAAC,CAAC,CAClDC,KAAK,CAACpB,KAAK,IAAIF,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEC,KAAK,CAAC,CAAC;IAClD,CAAC;IA9EC,IAAI,CAACS,KAAK,GAAG;MACXL,KAAK,EAAE,EAAE;MACTI,QAAQ,EAAE,EAAE;MACZa,GAAG,EAAE,CAAC;IACR,CAAC;EACH;EA2EAC,MAAMA,CAAA,EAAE;IAET,oBACGhD,OAAA;MAAKiD,SAAS,EAAC,KAAK;MAAAC,QAAA,gBACnBlD,OAAA,CAACT,UAAU;QAAA4D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACdtD,OAAA,CAACR,IAAI;QAAA2D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACRtD,OAAA,CAACN,IAAI;QAAAyD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACRtD,OAAA,CAACP,aAAa;QACdkC,aAAa,EAAE,IAAI,CAACA,aAAc;QAClCM,cAAc,EAAE,IAAI,CAACA;MAAe;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACJtD,OAAA,CAACF,eAAe;QAACoC,QAAQ,EAAE,IAAI,CAACC,KAAK,CAACL;MAAM;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAIV;AACA;AAEA,eAAehD,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}